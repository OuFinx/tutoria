---
import { getFileGitHistory, getGitRemoteInfo, generateCommitUrl, formatRelativeDate, type GitCommit, type GitRemoteInfo } from '../utils/git-history';

interface Props {
  filePath: string;
  showRevisionHistory?: boolean;
}

const { filePath, showRevisionHistory = true } = Astro.props;

let commits: GitCommit[] = [];
let remoteInfo: GitRemoteInfo | null = null;

if (showRevisionHistory) {
  try {
    [commits, remoteInfo] = await Promise.all([
      getFileGitHistory(filePath),
      getGitRemoteInfo()
    ]);
  } catch (error) {
    console.warn('Failed to load git history for revision display:', error);
  }
}
---

{showRevisionHistory && commits.length > 0 && (
  <>
    <hr style="border: none; border-top: 1px dashed var(--theme-text-light);" />
    <div class="revision-history">
      <h3 class="revision-title">
      Changes History
    </h3>
    
    <div class="revision-content">
      {commits.map((commit, index) => {
        const commitUrl = generateCommitUrl(remoteInfo, commit.fullHash);
        
        return (
          <div class="git-line" key={commit.hash}>
            {commitUrl ? (
              <a 
                href={commitUrl} 
                target="_blank" 
                rel="noopener noreferrer" 
                class="commit-hash"
                title={`View commit ${commit.fullHash} on ${remoteInfo?.platform || 'git hosting'}`}
              >
                {commit.hash}
              </a>
            ) : (
              <span class="commit-hash">{commit.hash}</span>
            )}
            <span class="commit-message">{commit.summary}</span>
            <span class="commit-time">({formatRelativeDate(commit.date)})</span>
          </div>
        );
      })}
    </div>
    </div>
  </>
)}

<style>
  .revision-history {
    padding: 1rem;
    background: transparent;
    border-radius: 8px;
  }
  
  .revision-title {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--theme-heading);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    transition: color 0.3s ease;
  }
  
  .revision-icon {
    opacity: 0.7;
  }
  
  .revision-content {
    font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
    font-size: 14px;
    line-height: 1.6;
  }
  
  .git-line {
    display: flex;
    align-items: baseline;
    margin-bottom: 8px;
    gap: 8px;
  }
  
  .commit-hash {
    color: var(--accent);
    font-weight: 500;
    transition: all 0.3s ease;
    min-width: 56px;
    flex-shrink: 0;
  }
  
  .commit-hash:hover {
    color: var(--accent-dark);
    text-decoration: underline;
    opacity: 0.8;
  }
  
  .commit-message {
    color: var(--theme-text);
    flex: 1;
    margin-right: 8px;
    transition: color 0.3s ease;
  }
  
  .commit-time {
    color: var(--theme-text-light);
    flex-shrink: 0;
    font-style: italic;
    font-size: 0.9em;
    transition: color 0.3s ease;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .revision-history {
      margin-left: -1em;
      margin-right: -1em;
      border-radius: 0;
    }
    
    .revision-content {
      font-size: 12px;
    }
    
    .git-line {
      display: flex;
      align-items: baseline;
      gap: 4px;
      margin-bottom: 12px;
    }
    
    .commit-hash {
      min-width: auto;
      margin-bottom: 2px;
    }
    
    .commit-message {
      margin-right: 0;
      margin-bottom: 2px;
    }
    
    .commit-time {
      font-size: 0.8em;
    }
  }
  
</style>